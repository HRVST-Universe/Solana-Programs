/*
 * HRVST Token Swap Program for Solana Blockchain
 * This program enables users to swap SOL for HRVST tokens and vice versa using Pumpfun's bonding curve.
 */

use anchor_lang::prelude::*;
use anchor_spl::token::{self, Token, TokenAccount, Transfer};
use solana_program::program::{invoke, invoke_signed};

declare_id!("YourProgramID");

#[program]
mod hrvst_token_swap {
    use super::*;

    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {
        msg!("HRVST Token Swap Program Initialized");
        Ok(())
    }

    pub fn swap_sol_for_hrvst(ctx: Context<SwapWithPumpfun>, sol_amount: u64) -> Result<()> {
        let user_authority = &ctx.accounts.user_authority;
        let pumpfun_program = &ctx.accounts.pumpfun_program;
        let pumpfun_account = &ctx.accounts.pumpfun_account;
        let hrvst_token_account = &mut ctx.accounts.hrvst_token_account;
        let user_hrvst_account = &mut ctx.accounts.user_hrvst_account;
        let sol_wallet = &mut ctx.accounts.sol_wallet;

        require!(sol_amount > 0, ErrorCode::InvalidAmount);

        // Transfer SOL from user's wallet to the reserve wallet
        **sol_wallet.lamports.borrow_mut() += sol_amount;
        **user_authority.lamports.borrow_mut() -= sol_amount;

        // Cross-program invocation to Pumpfun to calculate HRVST amount based on bonding curve
        let seeds = &[b"pumpfun_bonding_curve", user_authority.key.as_ref()];
        let signer_seeds = &[&seeds[..]];

        // Call Pumpfun program with the amount of SOL being provided
        let cpi_accounts = [
            AccountMeta::new_readonly(user_authority.key(), true),
            AccountMeta::new(hrvst_token_account.to_account_info().key(), false),
            AccountMeta::new(pumpfun_account.key(), false),
        ];
        let instruction = solana_program::instruction::Instruction {
            program_id: *pumpfun_program.key,
            accounts: cpi_accounts.to_vec(),
            data: sol_amount.to_le_bytes().to_vec(), // Passing the SOL amount for calculation
        };
        invoke_signed(
            &instruction,
            &[
                user_authority.to_account_info(),
                hrvst_token_account.to_account_info(),
                pumpfun_account.to_account_info(),
            ],
            signer_seeds,
        )?;

        // Example conversion - Update based on Pumpfun bonding curve response
        let hrvst_amount = sol_amount.checked_mul(100).unwrap(); // This will be determined by Pumpfun logic

        // Transfer HRVST tokens to the user's account
        let cpi_accounts = Transfer {
            from: hrvst_token_account.to_account_info().clone(),
            to: user_hrvst_account.to_account_info().clone(),
            authority: ctx.accounts.reserve_authority.to_account_info().clone(),
        };
        let cpi_program = ctx.accounts.token_program.to_account_info();
        let cpi_ctx = CpiContext::new(cpi_program, cpi_accounts);
        token::transfer(cpi_ctx, hrvst_amount)?;

        msg!("Swapped SOL for HRVST successfully via Pumpfun");
        Ok(())
    }

    pub fn swap_hrvst_for_sol(ctx: Context<SwapWithPumpfun>, hrvst_amount: u64) -> Result<()> {
        let user_hrvst_account = &mut ctx.accounts.user_hrvst_account;
        let sol_wallet = &mut ctx.accounts.sol_wallet;
        let user_authority = &ctx.accounts.user_authority;
        let pumpfun_program = &ctx.accounts.pumpfun_program;
        let pumpfun_account = &ctx.accounts.pumpfun_account;

        require!(hrvst_amount > 0, ErrorCode::InvalidAmount);

        // Cross-program invocation to Pumpfun to calculate SOL amount based on bonding curve
        let seeds = &[b"pumpfun_bonding_curve", user_authority.key.as_ref()];
        let signer_seeds = &[&seeds[..]];

        // Call Pumpfun program with the amount of HRVST being provided
        let cpi_accounts = [
            AccountMeta::new_readonly(user_authority.key(), true),
            AccountMeta::new(user_hrvst_account.to_account_info().key(), false),
            AccountMeta::new(pumpfun_account.key(), false),
        ];
        let instruction = solana_program::instruction::Instruction {
            program_id: *pumpfun_program.key,
            accounts: cpi_accounts.to_vec(),
            data: hrvst_amount.to_le_bytes().to_vec(), // Passing the HRVST amount for calculation
        };
        invoke_signed(
            &instruction,
            &[
                user_authority.to_account_info(),
                user_hrvst_account.to_account_info(),
                pumpfun_account.to_account_info(),
            ],
            signer_seeds,
        )?;

        // Example conversion - Update based on Pumpfun bonding curve response
        let sol_amount = hrvst_amount.checked_div(100).unwrap(); // This will be determined by Pumpfun logic

        // Transfer HRVST tokens from user to reserve
        let cpi_accounts = Transfer {
            from: user_hrvst_account.to_account_info().clone(),
            to: ctx.accounts.reserve_hrvst_account.to_account_info().clone(),
            authority: user_authority.to_account_info().clone(),
        };
        let cpi_program = ctx.accounts.token_program.to_account_info();
        let cpi_ctx = CpiContext::new(cpi_program, cpi_accounts);
        token::transfer(cpi_ctx, hrvst_amount)?;

        // Transfer SOL from reserve to user's account
        **user_authority.lamports.borrow_mut() += sol_amount;
        **sol_wallet.lamports.borrow_mut() -= sol_amount;

        msg!("Swapped HRVST for SOL successfully via Pumpfun");
        Ok(())
    }
}

#[derive(Accounts)]
pub struct Initialize {}

#[derive(Accounts)]
pub struct SwapWithPumpfun<'info> {
    #[account(mut)]
    pub user_hrvst_account: Account<'info, TokenAccount>, // User's HRVST token account
    #[account(mut)]
    pub reserve_hrvst_account: Account<'info, TokenAccount>, // Reserve's HRVST token account
    #[account(mut)]
    pub sol_wallet: AccountInfo<'info>, // Reserve's SOL wallet
    pub user_authority: Signer<'info>, // User's signing authority
    pub pumpfun_program: AccountInfo<'info>, // Pumpfun bonding curve program
    pub pumpfun_account: AccountInfo<'info>, // Pumpfun bonding curve state account
    pub reserve_authority: Signer<'info>, // Reserve authority
    pub token_program: Program<'info, Token>,
}

#[error_code]
pub enum ErrorCode {
    #[msg("Amount must be greater than zero")]
    InvalidAmount,
}
